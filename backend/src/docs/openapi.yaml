openapi: 3.0.3
info:
  title: Organic Food Traceability API
  description: Minimal production-lean Node.js TypeScript REST API for Organic Food Traceability
  version: 1.0.0
  contact:
    name: API Support
    email: support@organictrace.com
servers:
  - url: http://localhost:5000/api
    description: Development server
paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                  service:
                    type: string
  
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /producer/batches:
    post:
      summary: Create a new batch
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBatchRequest'
      responses:
        '201':
          description: Batch created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
    get:
      summary: Get producer's batches
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of batches
          content:
            application/json:
              schema:
                type: object
                properties:
                  batches:
                    type: array
                    items:
                      $ref: '#/components/schemas/Batch'
  
  /producer/batches/{id}:
    patch:
      summary: Update batch
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBatchRequest'
      responses:
        '200':
          description: Batch updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
  
  /producer/batches/{id}/transfer:
    post:
      summary: Transfer batch to retailer
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferBatchRequest'
      responses:
        '200':
          description: Batch transferred successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
  
  /retailer/batches:
    get:
      summary: Get retailer's batches
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of batches
          content:
            application/json:
              schema:
                type: object
                properties:
                  batches:
                    type: array
                    items:
                      $ref: '#/components/schemas/Batch'
  
  /retailer/batches/{id}/receive:
    post:
      summary: Receive batch
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteRequest'
      responses:
        '200':
          description: Batch received successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
  
  /retailer/batches/{id}/store:
    post:
      summary: Store batch
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteRequest'
      responses:
        '200':
          description: Batch stored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
  
  /retailer/batches/{id}/sell:
    post:
      summary: Sell batch
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteRequest'
      responses:
        '200':
          description: Batch sold successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
  
  /admin/users:
    get:
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  
  /admin/blocks/verify:
    get:
      summary: Verify blockchain integrity
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationResult'
  
  /admin/audit:
    get:
      summary: Get audit trail for batch
      security:
        - bearerAuth: []
      parameters:
        - name: batchId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Audit trail
          content:
            application/json:
              schema:
                type: object
                properties:
                  batchId:
                    type: string
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
  
  /admin/blocks:
    get:
      summary: Get blocks with pagination
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of blocks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlocksResponse'
  
  /public/trace/{batchId}:
    get:
      summary: Get full traceability for batch
      parameters:
        - name: batchId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Batch traceability
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceResponse'
        '404':
          description: Batch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /public/qrcode/{batchId}:
    get:
      summary: Generate QR code for batch
      parameters:
        - name: batchId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: QR code image
          content:
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: Batch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [PRODUCER, RETAILER, CONSUMER, ADMIN]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Batch:
      type: object
      properties:
        _id:
          type: string
        batchId:
          type: string
        productType:
          type: string
        originFarm:
          type: string
        harvestDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [CREATED, PROCESSING, CERTIFIED, IN_TRANSIT, RECEIVED, STORED, SOLD]
        currentOwnerUserId:
          type: string
        certification:
          $ref: '#/components/schemas/Certification'
        eventIds:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Event:
      type: object
      properties:
        _id:
          type: string
        batchId:
          type: string
        type:
          type: string
          enum: [BATCH_CREATED, HARVEST_UPDATED, CERT_UPLOAD, TRANSFER, RECEIVE, STORE, SELL]
        payload:
          type: object
        actorUserId:
          type: string
        timestamp:
          type: string
          format: date-time
        blockId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Block:
      type: object
      properties:
        _id:
          type: string
        index:
          type: number
        timestamp:
          type: string
          format: date-time
        prevHash:
          type: string
        merkleRoot:
          type: string
        hash:
          type: string
        signer:
          type: string
        eventIds:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Certification:
      type: object
      properties:
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
        docUrl:
          type: string
        signedBy:
          type: string
        signedAt:
          type: string
          format: date-time
    
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
        - role
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [PRODUCER, RETAILER, CONSUMER, ADMIN]
    
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    
    CreateBatchRequest:
      type: object
      required:
        - batchId
        - productType
        - originFarm
      properties:
        batchId:
          type: string
        productType:
          type: string
        originFarm:
          type: string
        harvestDate:
          type: string
          format: date-time
    
    UpdateBatchRequest:
      type: object
      properties:
        harvestDate:
          type: string
          format: date-time
        certification:
          $ref: '#/components/schemas/Certification'
    
    TransferBatchRequest:
      type: object
      required:
        - toRetailerUserId
      properties:
        toRetailerUserId:
          type: string
        note:
          type: string
    
    NoteRequest:
      type: object
      properties:
        note:
          type: string
    
    AuthResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string
            role:
              type: string
    
    BatchResponse:
      type: object
      properties:
        message:
          type: string
        batch:
          $ref: '#/components/schemas/Batch'
    
    VerificationResult:
      type: object
      properties:
        ok:
          type: boolean
        issues:
          type: array
          items:
            type: string
    
    BlocksResponse:
      type: object
      properties:
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/Block'
        pagination:
          type: object
          properties:
            page:
              type: integer
            limit:
              type: integer
            totalCount:
              type: integer
            totalPages:
              type: integer
            hasMore:
              type: boolean
    
    TraceResponse:
      type: object
      properties:
        batch:
          $ref: '#/components/schemas/Batch'
        timeline:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              at:
                type: string
                format: date-time
              by:
                type: string
              payload:
                type: object
        integrity:
          type: object
          properties:
            verified:
              type: boolean
            blocks:
              type: integer
            issues:
              type: array
              items:
                type: string
    
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
